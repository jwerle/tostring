#!/usr/bin/env node

var to = require('../')
  , util = require('util')
  , isatty = require('tty').isatty
  , basename = require('path').basename

var bind = Function.prototype.bind.bind(Function.prototype.call);
var shift = bind(Array.prototype.shift);
var unshift = bind(Array.prototype.unshift);
var exit = process.exit;
var stdin = process.stdin;
var stdout = process.stdout;
var stderr = process.stderr;
var argv = process.argv; argv.shift(); // shift `node' exec name
var argc = process.argv.length;
var prog = basename(argv[0]);
var type = argv[1];

/**
 * Program options
 */

var opts = {
  newline: true // -n
};

/**
 * Format a string a print to
 * stream
 */

function fprintf () {
  shift(arguments)
  .write(util.format.apply(null, arguments));
}

/**
 * Printf a formatted string
 * to `stdout'
 */

function printf () {
  unshift(arguments, stdout);
  fprintf.apply(null, arguments);
}

/**
 * Output known buffer type to
 * `stderr'
 */

function unknown () {
  fprintf(stderr, "Unknown buffer type: '%s`\n", type);
}

/**
 * Output usage
 */

function usage () {
  fprintf(stderr, "usage: %s [-nhv] [type]\n", prog);
}

/**
 * main function
 */

void function main () {
  var i = 1;
  // parse opts
  for (; argv[i]; i++) {
    if ('-' != argv[i][0]) { continue; }
    switch (argv[i]) {
      case '-n':
        opts.newline = false;
        argv.splice(i, 1);
        break;

      case '-h':
        usage();
        fprintf(stderr, "\nexample:\n");
        fprintf(stderr, "  $ echo abc | %s hex\n", prog);
        exit(0);
        break;

      case '-v':
        fprintf(stderr, "%s\n", require('../package').version);
        exit(0);
        break;

      default:
        fprintf(stderr, "Unknown option: `%s'\n", argv[i]);
        usage();
        exit(1);
    }
  }

  if (isatty(stdin)) {
    fprintf(stderr, "error: expecting data from stdin\n");
    usage();
    exit(1);
  } else if (null == type) {
    fprintf(stderr, "error: expecting buffer type\n");
    usage();
    exit(1);
  } else if ('binary' == type) {
    fprintf(stderr, "error: use of binary buffer types is illegal\n");
    exit(1);
  } else try {
    // test type
    Buffer('noop').toString(type);
  } catch (e) {
    unknown();
    usage();
    exit(1);
  }

  // transform
  stdin.pipe(to(type, opts)).pipe(stdout);
}();
